<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Gavrie's Blog]]></title>
  <link href="http://philipson.co.il/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://philipson.co.il/"/>
  <updated>2014-06-23T17:38:32+03:00</updated>
  <id>http://philipson.co.il/</id>
  <author>
    <name><![CDATA[Gavrie Philipson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Buffers will fill Up... Eventually]]></title>
    <link href="http://philipson.co.il/blog/2014/06/18/buffers-will-fill-up-eventually/"/>
    <updated>2014-06-18T18:42:00+03:00</updated>
    <id>http://philipson.co.il/blog/2014/06/18/buffers-will-fill-up-eventually</id>
    <content type="html"><![CDATA[<p><em>(Updated version: Incorporates fixes from reader comments)</em></p>

<p>A colleague asked me to look into a problem with him, mentioning that "Tlib hangs when we run it". Tlib is a fairly large project that is written in Python. His initial analysis showed that it hangs at a very early phase, during with it tries to fetch the latest version to run from a git server. Various users complained about the same problem, suggesting that it is not a local issue.</p>

<p>Running the code, and interrupting it with <code>^C</code> when it hangs, turned up a result similar to the following:</p>

<pre><code>^CTraceback (most recent call last):
  File "./execute_wrong.py", line 8, in &lt;module&gt;
    retval, out, err = execute("git ls-remote")
  File "./execute_wrong.py", line 5, in execute
    retval = p.wait()
  File "/usr/lib/python2.7/subprocess.py", line 1376, in wait
    pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
  File "/usr/lib/python2.7/subprocess.py", line 476, in _eintr_retry_call
    return func(*args)
KeyboardInterrupt
</code></pre>

<p>Interesting. The code seems to hang while waiting for the <code>git</code> child process to terminate. However, running <code>git ls-remote</code> from the command line works fine, so why does it hang when run from the code?</p>

<!-- more -->


<h2>Investigating the Issue</h2>

<p>Let's look at the code history to see if anything has changed recently.</p>

<p>Nope. A quick <code>git blame</code> shows that this code is more than 5 years old, and has been performing flawlessly every day since then. So what else has changed?</p>

<p>Let's see what is happening while waiting for the <code>git</code> child process to finish, by running <code>strace</code> on the process:</p>

<pre><code>$ strace -p 5774
Process 5774 attached
write(1, "pull/624/merge\n2fe9da91f5a4b5ba3"..., 4096
</code></pre>

<p>OK. The process is trying to write to <code>stdout</code>, but hanging while doing so. It looks like some buffer is getting filled, which blocks the process from writing further.</p>

<p>Let's look at the size of the data returned by the child process:</p>

<pre><code>$ git ls-remote | wc -c
From gitserver:/git/qa/tlib
   65572
</code></pre>

<p>Aha! This number looks suspiciously like "a bit more than 64k". Which affirms our hypothesis. Let's try to reduce its size by deleting some old remote branches:</p>

<pre><code>$ git push origin :old_branch1
$ git push origin :old_branch2
...
$ git ls-remote | wc -c
From gitserver:/git/qa/tlib
   65368
</code></pre>

<p>Now to run the program again... It worked! The program continues to run successfully.</p>

<h2>The Code</h2>

<p>Here is what the original code looked like (slightly changed to protect the innocent). Can you spot what is wrong?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The original code (execute_wrong.py)</span> <a href='/downloads/code/buffers/execute_wrong.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">command</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">retval</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">retval</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span> <span class="n">p</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">retval</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">execute</span><span class="p">(</span><span class="s">&quot;git ls-remote&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The problem is that we <code>wait()</code> for the process to terminate, without reading its output. Only after it terminates do we read its output. This code has worked correctly for years, since the output so far happened to be smaller than 64k and fitted completely in the pipe's buffer. Once it exceeded the buffer's size due to one remote branch too many, it blocked the process on the pipe, while the parent was waiting for it to terminate. A classic deadlock condition.</p>

<h2>Fixing the Problem</h2>

<p>Now that we see the problem, fixing it is simple: First read, then wait.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The fixed code (execute_right.py)</span> <a href='/downloads/code/buffers/execute_right.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">command</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">retval</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">retval</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'>
</span><span class='line'><span class="n">retval</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">execute</span><span class="p">(</span><span class="s">&quot;git ls-remote&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, as Alon Horev and Baruch Even pointed out in theirs comments, this is still not correct. Since we try to read from <code>stdout</code> until it gets an EOF and only then try to read from <code>stderr</code>, the <code>stderr</code> pipe's buffer can fill up if the child process writes a lot of data to it.</p>

<p>The correct solution involves reading from both pipes in tandem. The <code>communicate()</code> method of the <code>Popen</code> class implements this using the <code>select()</code> system call on POSIX, and with threads on Windows platforms.</p>

<h2>Conclusion</h2>

<p>Buffers, filesystems, databases will all fill up sometime in the future. Always take this into account when writing code. Any time you generate some data, be sure to set up a process to prune the data and don't assume that it will be OK -- because it will come back to bite you, or at least some future user of your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving readability and flow control in Python]]></title>
    <link href="http://philipson.co.il/blog/2012/02/16/improving-readability-and-flow-control-in-python/"/>
    <updated>2012-02-16T00:31:00+02:00</updated>
    <id>http://philipson.co.il/blog/2012/02/16/improving-readability-and-flow-control-in-python</id>
    <content type="html"><![CDATA[<p>Recently, a colleague and I refactored a piece of existing code that had new
behavior added to it. During the process, we managed to improve the readability of the
code using several techniques that I'll describe below.</p>

<h2>Where We Started</h2>

<p>The original code was fairly simple: It decides whether certain "dead"
components need to be "revived", and presents the user with a prompt to choose
from one of several actions.
Depending on the user's choice, the code then proceeds to take the appropriate action:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The original code (code0.py)</span> <a href='/downloads/code/flow_control/code0.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">revive_dead_components</span><span class="p">():</span>
</span><span class='line'>    <span class="n">choice</span> <span class="o">=</span> <span class="n">choose</span><span class="p">(</span><span class="s">&#39;&quot;I see dead components...&quot;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>       <span class="s">&quot;Do you wish to (r)evive them, (c)ontinue without reviving, or (q)uit?&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="p">{</span> <span class="s">&quot;r&quot;</span><span class="p">:</span> <span class="s">&quot;revive&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s">&quot;c&quot;</span><span class="p">:</span> <span class="s">&quot;continue&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s">&quot;Q&quot;</span><span class="p">:</span> <span class="s">&quot;quit&quot;</span><span class="p">},</span>
</span><span class='line'>       <span class="n">default</span> <span class="o">=</span> <span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;revive&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">revive_components</span><span class="p">()</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;quit&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">TestCannotRunException</span><span class="p">(</span><span class="s">&quot;Dead components exist&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;continue&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Adding New Behavior</h2>

<p>We now wanted to add some new functionality to the above code, namely the ability to
allow the user to select a <em>subset</em> of the components that he wants to revive.</p>

<p>To make things more foolproof, in case the user chose to revive selected
components but then neglected to select any components from the list, the code
would not proceed blindly but rather send the user back to the menu so that he could try again.</p>

<p>The first version of the new code looked like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>New behavior, first version (code1.py)</span> <a href='/downloads/code/flow_control/code1.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">revive_dead_components</span><span class="p">():</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">choice</span> <span class="o">=</span> <span class="n">choose</span><span class="p">(</span><span class="s">&#39;&quot;I see dead components...&quot;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>            <span class="s">&quot;Do you wish to (r)evive them all, (s)elect components to revive, &quot;</span>
</span><span class='line'>            <span class="s">&quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="s">&quot;r&quot;</span><span class="p">:</span> <span class="s">&quot;revive&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;s&quot;</span><span class="p">:</span> <span class="s">&quot;select&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;c&quot;</span><span class="p">:</span> <span class="s">&quot;continue&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;Q&quot;</span><span class="p">:</span> <span class="s">&quot;quit&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="n">default</span> <span class="o">=</span> <span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;revive&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">revive_components</span><span class="p">()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;quit&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">TestCannotRunException</span><span class="p">(</span><span class="s">&quot;Dead components exist&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;continue&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">&quot;select&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">selected</span> <span class="o">=</span> <span class="n">show_menu</span><span class="p">(</span><span class="s">&quot;Which components would you like to revive?&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">selected</span><span class="p">:</span>
</span><span class='line'>                <span class="n">revive_components</span><span class="p">(</span><span class="n">selected</span><span class="p">)</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Nothing selected...&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To get the required behavior, we used an infinite <code>while True</code> loop that terminates with an
explicit <code>break</code> when a valid choice is made by the user and reiterates otherwise.
This ensures that we don't continue until a valid choice is made.</p>

<h2>Can We Do Better?</h2>

<p>The problem with the above method is that the flow control is not immediately
apparent when looking at the code: It's not obvious that the infinite loop
should actually terminate in all but one case. A future developer could easily
break this behavior.</p>

<p>In addition, the <code>if</code>/<code>elif</code> ladder becomes a bit too long to read
comfortably.</p>

<p>The second iteration was meant to make the flow control clearer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Refactoring, first try (code2.py)</span> <a href='/downloads/code/flow_control/code2.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">revive_dead_components</span><span class="p">():</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">InvalidChoiceError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">choice_revive</span><span class="p">():</span>    <span class="n">revive_components</span><span class="p">()</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">choice_quit</span><span class="p">():</span>      <span class="k">raise</span> <span class="n">TestCannotRunException</span><span class="p">(</span><span class="s">&quot;Dead components exist&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">choice_continue_</span><span class="p">():</span> <span class="k">pass</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">choice_select</span><span class="p">():</span>
</span><span class='line'>        <span class="n">selected</span> <span class="o">=</span> <span class="n">show_menu</span><span class="p">(</span><span class="s">&quot;Which components would you like to revive?&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">selected</span><span class="p">:</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Nothing selected...&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">InvalidChoiceError</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">revive_components</span><span class="p">(</span><span class="n">selected</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">choice</span> <span class="o">=</span> <span class="n">choose</span><span class="p">(</span><span class="s">&#39;&quot;I see dead components...&quot;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>            <span class="s">&quot;Do you wish to (r)evive them all, (s)elect components to revive, &quot;</span>
</span><span class='line'>            <span class="s">&quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="s">&quot;r&quot;</span><span class="p">:</span> <span class="s">&quot;revive&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;s&quot;</span><span class="p">:</span> <span class="s">&quot;select&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;c&quot;</span><span class="p">:</span> <span class="s">&quot;continue&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;Q&quot;</span><span class="p">:</span> <span class="s">&quot;quit&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="n">default</span> <span class="o">=</span> <span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">locals</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;choice_</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">choice</span><span class="p">)()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">InvalidChoiceError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We use several techniques here to improve the clarity of the code:</p>

<ul>
<li><p>We used internal functions to encapsulate the possible actions to take. The
advantage of using internal functions is that it keeps the external namespace
clean, and the naming of each function makes its purpose quite clear.</p></li>
<li><p>We used a dictionary instead of the <code>if</code>/<code>elif</code> construct. Since Python
doesn't have a <code>switch</code> or <code>case</code> statement, this is a more readable replacement.</p></li>
<li><p>We decided to use an exception to signify, well, <em>exceptional</em> flow control: If the user hasn't
selected any components, this warrants exceptional behavior. This technique is
much debated, but we felt like it was appropriate in this case.</p></li>
<li><p>The function name to be called is determined dynamically at runtime from the
user's selection. The idea was to avoid code duplication by needing to specify the names
of the functions yet again (but see below).</p></li>
</ul>


<h2>Removing Some Coolness For Readability</h2>

<p>My colleague pointed out that the <code>locals().get('choice_%s' % choice)()</code> trick
is not quite readable. I agreed, and was happy to accept his improved proposal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Refactoring, final version (code3.py)</span> <a href='/downloads/code/flow_control/code3.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">revive_dead_components</span><span class="p">():</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">choice_func</span> <span class="o">=</span> <span class="n">choose</span><span class="p">(</span><span class="s">&#39;&quot;I see dead components...&quot;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>            <span class="s">&quot;Do you wish to (r)evive them all, (s)elect components to revive, &quot;</span>
</span><span class='line'>            <span class="s">&quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nb">dict</span><span class="p">(</span><span class="n">r</span> <span class="o">=</span> <span class="n">choice_revive</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">s</span> <span class="o">=</span> <span class="n">choice_select</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">c</span> <span class="o">=</span> <span class="n">choice_continue</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">Q</span> <span class="o">=</span> <span class="n">choice_quit</span>
</span><span class='line'>                 <span class="p">),</span>
</span><span class='line'>            <span class="n">default</span> <span class="o">=</span> <span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">choice_func</span><span class="p">()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">InvalidChoiceError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This version has several advantages:</p>

<ul>
<li><p>It doesn't use "magic" to achieve the selection of the function. Duplication
is better than magic in this case, since it makes the code more readable.</p></li>
<li><p>The dictionary is created using the <code>dict()</code> syntax instead of the <code>{...}</code>
syntax, which gets rid of a lot of punctuation and makes the code clearer.</p></li>
</ul>


<h2>Conclusion</h2>

<p>It turns out that even in such a simple piece of code, several programming
techniques can be used to make the code clearer to read and maintain.</p>

<p>See you next time!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure on Philipson Consulting</title>
    <link>http://philipson.co.il/categories/infrastructure/</link>
    <description>Recent content in Infrastructure on Philipson Consulting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2016 15:39:00 +0300</lastBuildDate>
    <atom:link href="http://philipson.co.il/categories/infrastructure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Taming a Legacy Application with Docker</title>
      <link>http://philipson.co.il/post/taming-a-legacy-application-with-docker/</link>
      <pubDate>Wed, 28 Sep 2016 15:39:00 +0300</pubDate>
      
      <guid>http://philipson.co.il/post/taming-a-legacy-application-with-docker/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ll be the first one to admit that I have been spoiled by &lt;a href=&#34;http://programmableinfrastructure.com/&#34;&gt;programmable infrastructure&lt;/a&gt;. It becomes easy to forget that not too long ago we used to spend hours upon hours on installing a physical server or VM, when nowadays all it takes is a simple &lt;code&gt;docker run&lt;/code&gt; to do so many things.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why I sighed inwardly when I needed to install a staging server for a legacy LAMP application.&lt;/p&gt;

&lt;h2 id=&#34;staging-testrail&#34;&gt;Staging TestRail&lt;/h2&gt;

&lt;p&gt;One of my clients uses &lt;a href=&#34;http://www.gurock.com/testrail/&#34;&gt;TestRail&lt;/a&gt;, a Web based test management tool. They have it installed in a VM on their premises. They asked me to do some work related to automated reporting of test results via &lt;a href=&#34;http://docs.gurock.com/testrail-api2/start&#34;&gt;the TestRail API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I usually do in such cases is install a staging server: A duplicate of the production server on my laptop (or in the cloud somewhere) that allows me to play with it without endangering the production server. To get such a staging server in this case would mean installing TestRail from scratch, and then feeding it with a copy of the data from the customer&amp;rsquo;s production database. While it may have been possible to clone the production VM and use that instead, this would be both heavyweight (a big fat VM) and nonreproducible (what went into this VM?).&lt;/p&gt;

&lt;p&gt;So, on to the installation. Unfortunately TestRail do not provide a Docker image or a VM image. All they have is &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-requirements&#34;&gt;instructions on installing a Linux or Windows server&lt;/a&gt; with the relevant dependencies, adding &lt;a href=&#34;http://docs.gurock.com/testrail-admin/howto-installing-ioncube&#34;&gt;a proprietary PHP extension&lt;/a&gt;, then installing a LAMP environment, creating their database, &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-unix&#34;&gt;and some more stuff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It might not be so bad to do this once, but it never ends there. You always end up needing to reinstall several times. It also would be nice to be able to share the result with other developers so they can easily create their own staging servers.&lt;/p&gt;

&lt;h2 id=&#34;dockerizing-testrail&#34;&gt;Dockerizing TestRail&lt;/h2&gt;

&lt;p&gt;What would be really nice is to have a &lt;code&gt;Dockerfile&lt;/code&gt; that would do all the above work, making it simple to install and start a new staging server in a container. I looked around a bit to see if someone had already done this. I did find some prior attempts (such as &lt;a href=&#34;https://github.com/garethjevans/docker-testrail&#34;&gt;this one&lt;/a&gt;), but these only created a base image with some dependencies and not a full solution.&lt;/p&gt;

&lt;p&gt;I then proceeded to create a &lt;code&gt;Dockerfile&lt;/code&gt; that does a full installation.&lt;/p&gt;

&lt;p&gt;There were several challenges involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TestRail requires a database such as MySQL and a Web server such as Apache. To create a standalone solution, all of these should be included in the image.&lt;/li&gt;
&lt;li&gt;Several changes need to be made to system configuration files.&lt;/li&gt;
&lt;li&gt;A new database must be created during the installation.&lt;/li&gt;
&lt;li&gt;To complete the installation, an installation wizard must be run via the Web UI. This means that there is plenty of state to keep around.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could automate all this, it would be possible to create a new staging server with one &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-base-image&#34;&gt;Creating the Base Image&lt;/h2&gt;

&lt;p&gt;The TestRail &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-requirements&#34;&gt;installation requirements&lt;/a&gt; recommend installing Ubuntu LTS, as well as MySQL, PHP and Apache. In short, a standard LAMP stack. We pick Ubuntu 14.04 LTS, a.k.a. &lt;code&gt;trusty&lt;/code&gt;, since the latest release includes PHP 7 which doesn&amp;rsquo;t seem to be supported by TestRail.&lt;/p&gt;

&lt;p&gt;We therefore write the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; ubuntu:trusty&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y --no-install-recommends &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    php5 php5-cli php5-mysql php5-curl &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mysql-server &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    curl &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    unzip &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We add &lt;code&gt;curl&lt;/code&gt; since we&amp;rsquo;ll need it later to download things, and &lt;code&gt;unzip&lt;/code&gt; since TestRail comes as a zip file.&lt;/p&gt;

&lt;h2 id=&#34;installing-ioncube&#34;&gt;Installing ionCube&lt;/h2&gt;

&lt;p&gt;The ionCube PHP extension that TestRail requires is proprietary software, so we cannot distribute it. Instead, we download it automatically in the &lt;code&gt;Dockerfile&lt;/code&gt;. We then follow &lt;a href=&#34;http://docs.gurock.com/testrail-admin/howto-installing-ioncube&#34;&gt;the instructions&lt;/a&gt; to install it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; curl -O http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64_5.1.2.tar.gz &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    tar vxfz ioncube_loaders_lin_*.tar.gz &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    rm -f ioncube_loaders_lin_*.tar.gz

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;zend_extension=/ioncube/ioncube_loader_lin_5.5.so&amp;quot;&lt;/span&gt; &amp;gt; /etc/php5/cli/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    cat /etc/php5/cli/php.ini &amp;gt;&amp;gt; /etc/php5/cli/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mv /etc/php5/cli/php.ini.new /etc/php5/cli/php.ini &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;zend_extension=/ioncube/ioncube_loader_lin_5.5.so&amp;quot;&lt;/span&gt; &amp;gt; /etc/php5/apache2/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    cat /etc/php5/apache2/php.ini &amp;gt;&amp;gt; /etc/php5/apache2/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mv /etc/php5/apache2/php.ini.new /etc/php5/apache2/php.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we configure ionCube for both the CLI and Apache PHP versions, since both are used by TestRail: It uses the CLI version to run scheduled tasks.&lt;/p&gt;

&lt;h2 id=&#34;installing-testrail&#34;&gt;Installing TestRail&lt;/h2&gt;

&lt;p&gt;Since TestRail is proprietary software, we cannot redistribute it, nor can we download it automatically since the download requires a username and password. We therefore assume that you have downloaded it already to the current directory.&lt;/p&gt;

&lt;p&gt;We proceed to copy TestRail to the image, and unzip it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;COPY testrail-*.zip /
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;cd&lt;/span&gt; /var/www/html &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -q /testrail-*.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;completing-the-installation-automatically&#34;&gt;Completing the Installation Automatically&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-unix&#34;&gt;the instructions&lt;/a&gt;, to complete the installation, we now need to:
- Create the TestRail database
- Run its Installation Wizard
- Configure a background task to run&lt;/p&gt;

&lt;p&gt;The Web-based Installation wizard asks several questions, and as a result it creates a &lt;code&gt;config.php&lt;/code&gt; file. It would be great to avoid running it, and instead provide the answers directly. To achieve this, I ran the wizard once, and then saved the &lt;code&gt;config.php&lt;/code&gt; file. I then dumped the database contents using &lt;code&gt;mysqldump testrail &amp;gt; testrail.sql&lt;/code&gt;, so we can skip the wizard entirely. Instead, we copy the &lt;code&gt;config.php&lt;/code&gt; file to its location and recreate the database from the dumped data.&lt;/p&gt;

&lt;p&gt;Note that if you have an existing database that you want to use, you can dump is as described and replace the &lt;code&gt;testrail.sql&lt;/code&gt; file with your version.&lt;/p&gt;

&lt;p&gt;To complete the process, we copy the mentioned files to the image. We also provide a script, &lt;code&gt;run.sh&lt;/code&gt;, that will run when the container starts to complete the process.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;COPY config.php /var/www/html/testrail/config.php
COPY testrail.sql /
COPY run.sh /

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; /run.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;preparing-the-container-runtime&#34;&gt;Preparing the Container Runtime&lt;/h2&gt;

&lt;p&gt;We will now describe the &lt;code&gt;run.sh&lt;/code&gt; script that runs when the container starts.&lt;/p&gt;

&lt;p&gt;The first part creates the log directory required by TestRail, and starts the necessary background task via &lt;code&gt;cron&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/www/html/testrail/logs
chown www-data /var/www/html/testrail/logs

&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;* * * * * www-data /usr/bin/php /var/www/html/testrail/task.php&amp;#39;&lt;/span&gt; &amp;gt; /etc/cron.d/testrail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next parts run MySQL, and creates the database. Note that &lt;code&gt;init&lt;/code&gt; is not running in the container, but we can still start MySQL as usual by running its &lt;code&gt;init&lt;/code&gt; script.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/mysql start

&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;CREATE DATABASE testrail DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;CREATE USER &amp;#39;testrail&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;newpassword&amp;#39;;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;GRANT ALL ON testrail.* TO &amp;#39;testrail&amp;#39;@&amp;#39;localhost&amp;#39;;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now load the contents of the database, originally created by the Installation Wizard:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mysql testrail &amp;lt; testrail.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finally, we start Apache and go to sleep so that the container will stay active.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/apache2 start
sleep infinity
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;building-the-image-and-starting-the-container&#34;&gt;Building the Image and Starting the Container&lt;/h1&gt;

&lt;p&gt;We can now build the Docker image:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker build -t testrail .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we can start the container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker run --name testrail -d -p 7070:80 testrail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we run the container in detached mode (&lt;code&gt;-d&lt;/code&gt;), and forward its port 80 to our local port 7070.&lt;/p&gt;

&lt;p&gt;We can now log into TestRail by browsing to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:7070/testrail/&#34;&gt;http://localhost:7070/testrail/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default user is &lt;code&gt;admin@admin.com&lt;/code&gt;, and the password is &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;keeping-your-data&#34;&gt;Keeping Your Data&lt;/h2&gt;

&lt;p&gt;Remember that any data you create will be lost when stopping the container. If you want to keep your data, connect to the container using &lt;code&gt;docker exec&lt;/code&gt;, then dump the data with &lt;code&gt;mysqldump&lt;/code&gt; and &lt;code&gt;docker cp&lt;/code&gt; it to your computer as &lt;code&gt;testrail.sql&lt;/code&gt;. The next time you can use it to restore the database.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We described how we created a fully automated process for installing and configuring a legacy LAMP application. Such a process makes it easy to create and destroy staging servers as needed without relying on any pre-existing state.&lt;/p&gt;

&lt;p&gt;If you want to recreate the Docker image, or create your own variant, feel free to get the above code from &lt;a href=&#34;https://github.com/gavrie/testrail&#34;&gt;its GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/ballance/5203638978/&#34;&gt;ballance&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating virtual FC WWPNs for a storage lab</title>
      <link>http://philipson.co.il/post/generating-virtual-fc-wwpns-for-a-storage-lab/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/generating-virtual-fc-wwpns-for-a-storage-lab/</guid>
      <description>

&lt;p&gt;At work, I encountered an interesting problem: While testing the Fibre Channel (FC)
scalability of a storage product, we needed to create a &lt;em&gt;lot&lt;/em&gt; of FC connections between hosts and the storage system. This would in turn require a large number of FC Initiators, each of which having a unique &lt;a href=&#34;http://en.wikipedia.org/wiki/World_Wide_Port_Name&#34;&gt;World-Wide Port Name (WWPN)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest and cheapest method to set up a lot of initiators without actually purchasing zillions of FC HBAs would be to use &lt;a href=&#34;http://en.wikipedia.org/wiki/NPIV&#34;&gt;N_Port ID Virtualization&lt;/a&gt;, a.k.a. NPIV. This method allows a single FC HBA to present itself to the FC fabric with multiple WWPNs. This, in turn, allows the creation of many connections to the target storage device from a small number of hosts.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;WWPNs can&amp;rsquo;t just be pulled out of thin air. They are allocated &amp;ndash; in chunks &amp;ndash; by a central authority, the &lt;a href=&#34;http://standards.ieee.org/develop/regauth/&#34;&gt;IEEE Registration Authority&lt;/a&gt;. Just making up random WWPNs could cause trouble for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The WWPN must be unique on the fabric, which means it must be generated in a deterministic way so that two hosts won&amp;rsquo;t be using the same WWPN and thereby confuse the fabric.&lt;/li&gt;
&lt;li&gt;The WWPN should not have a chance of clashing with official WWPNs of purchased HBAs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With physical (as opposed to virtual) HBAs, this is managed by allocating a OUI (Organizationally Unique Identifier) to every vendor, who in turns tacks on his own vendor-specific serial number to come up with a unique WWPN. This is similar to the MAC address allocation of Ethernet, Wi-Fi and Bluetooth devices.&lt;/p&gt;

&lt;p&gt;The textbook solution for our problem would have involved the use of an officially allocated OUI to generate legal WWPNs, but that seemed like overkill for lab project which would never be used on a production SAN.&lt;/p&gt;

&lt;h2 id=&#34;some-background&#34;&gt;Some Background&lt;/h2&gt;

&lt;p&gt;We now require a kind of a compromise which takes care of the above two issues without causing too much bureaucratic pain. To reach such a solution, we&amp;rsquo;ll refer to the IEEE&amp;rsquo;s &lt;a href=&#34;http://standards.ieee.org/develop/regauth/tut/fibre.pdf&#34;&gt;Guidelines for Fibre Channel Use of the Organizationally Unique Identifier (OUI)&lt;/a&gt;, and cheat a bit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we have an FC HBA with a WWPN of &lt;code&gt;10:00:00:00:c9:93:53:6d&lt;/code&gt;.
We&amp;rsquo;ll decode it according to the IEEE Guidelines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10:00:vv:vv:vv:ss:ss:ss
\___/ \______/ \______/
  |      |        |
  |      |        |
  |      |         \__ Vendor-specific part (24 bits)
  |      |
  |       \__ Vendor OUI (24 bits)
  |
   \__ This WWPN uses the Original WWN format
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to this diagram, our sample WWPN contains the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;10:00&lt;/code&gt; prefix means that it uses the original WWN format (a.k.a. &amp;ldquo;NAA IEEE 48-bit address format&amp;rdquo;), as opposed to newer formats that starting with another sequence&lt;/li&gt;
&lt;li&gt;The vendor is &lt;code&gt;00:00:c9&lt;/code&gt;, which is an OUI belonging to Emulex Corporation
(according to the &lt;a href=&#34;http://standards.ieee.org/develop/regauth/oui/oui.txt&#34;&gt;OUI list&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The vendor-specific part is &lt;code&gt;93:53:6d&lt;/code&gt;, which is 24 bits long&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-one-wwpn-to-generate-many-new-ones&#34;&gt;Using One WWPN to Generate Many New Ones&lt;/h2&gt;

&lt;p&gt;For every physical WWPN, we need to be able to generate up to 256 virtual WWPNs to be used with NPIV (assuming that each HBA port supports up to 256 virtual ports). The trick lies in reusing the vendor-specific part to generate multiple WWPNs per physical port, each of which would be guaranteed to be unique throughout the lab.&lt;/p&gt;

&lt;p&gt;For that, we rely on the existence of a newer WWN format (&amp;ldquo;NAA IEEE Registered&amp;rdquo;) that has more space for the vendor-specific part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5v:vv:vv:vs:ss:ss:ss:ss
|\_______/\___________/
|   |        |
|   |        |
|   |         \__ Vendor-specific part (extended to 36 bits)
|   |
|    \__ Vendor OUI (still 24 bits)
|
 \__ Newer WWN format (NAA IEEE Registered)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good, we now have 36 bits for the vendor-specific part!&lt;/p&gt;

&lt;p&gt;We will use the larger vendor-specific field to include &lt;em&gt;both&lt;/em&gt; the vendor-specific part of the physical ports WWPN (which is just 24 bits), &lt;em&gt;and&lt;/em&gt; our own 12-bit custom part. This will let us generate up to 2&lt;sup&gt;12&lt;/sup&gt; = 4096 virtual ports per physical port, which is more than enough.&lt;/p&gt;

&lt;p&gt;Just to be safe, and to avoid a future clash with HBAs from the same vendor who might use the new numbering scheme as well, we&amp;rsquo;ll modify the OUI to a currently unused one (&lt;code&gt;0000c8&lt;/code&gt; instead of &lt;code&gt;0000c9&lt;/code&gt;). This is of course not 100% future-proof, but is good enough for our purposes.&lt;/p&gt;

&lt;p&gt;This leads us to the following range of generated WWPNs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Original WWPN:

    10:00:00:00:c9:93:53:6d, semantically represented as:

    1000 0000c9 93536d
         \____/ \____/
           |      |
         vendor   |
                serial

Generated WWPN range:

    5 0000c8 93536d 000
    5 0000c8 93536d 001
    5 0000c8 93536d 002
    ...
    5 0000c8 93536d fff
      \____/ \____/ \_/
        |      |     |
      vendor   |    custom
             serial
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While still being a hack, the above scheme allows us to generate as many WWPNs as we need.&lt;/p&gt;

&lt;p&gt;It has the advantage of being intuitive, since it is easy to determine just by looking at the WWPNs which ones of them are physical (starting with &lt;code&gt;1000 0000c9&lt;/code&gt;) and which are virtual (starting with &lt;code&gt;5 0000c8&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It also makes it easy to see which virtual WWPNs belong to each physical port, which is important for debugging purposes: The serial number of the physical port (&lt;code&gt;93536d&lt;/code&gt;) is part of the virtual port&amp;rsquo;s WWPN as well.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
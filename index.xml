<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Philipson Consulting and Training</title>
    <link>http://philipson.co.il/</link>
    <description>Recent content on Philipson Consulting and Training</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2016 15:39:00 +0300</lastBuildDate>
    <atom:link href="http://philipson.co.il/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Taming a Legacy Application with Docker</title>
      <link>http://philipson.co.il/post/taming-a-legacy-application-with-docker/</link>
      <pubDate>Wed, 28 Sep 2016 15:39:00 +0300</pubDate>
      
      <guid>http://philipson.co.il/post/taming-a-legacy-application-with-docker/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ll be the first one to admit that I have been spoiled by &lt;a href=&#34;http://programmableinfrastructure.com/&#34;&gt;programmable infrastructure&lt;/a&gt;. It becomes easy to forget that not too long ago we used to spend hours upon hours on installing a physical server or VM, when nowadays all it takes is a simple &lt;code&gt;docker run&lt;/code&gt; to do so many things.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why I sighed inwardly when I needed to install a staging server for a legacy LAMP application.&lt;/p&gt;

&lt;h2 id=&#34;staging-testrail&#34;&gt;Staging TestRail&lt;/h2&gt;

&lt;p&gt;One of my clients uses &lt;a href=&#34;http://www.gurock.com/testrail/&#34;&gt;TestRail&lt;/a&gt;, a Web based test management tool. They have it installed in a VM on their premises. They asked me to do some work related to automated reporting of test results via &lt;a href=&#34;http://docs.gurock.com/testrail-api2/start&#34;&gt;the TestRail API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I usually do in such cases is install a staging server: A duplicate of the production server on my laptop (or in the cloud somewhere) that allows me to play with it without endangering the production server. To get such a staging server in this case would mean installing TestRail from scratch, and then feeding it with a copy of the data from the customer&amp;rsquo;s production database. While it may have been possible to clone the production VM and use that instead, this would be both heavyweight (a big fat VM) and nonreproducible (what went into this VM?).&lt;/p&gt;

&lt;p&gt;So, on to the installation. Unfortunately TestRail do not provide a Docker image or a VM image. All they have is &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-requirements&#34;&gt;instructions on installing a Linux or Windows server&lt;/a&gt; with the relevant dependencies, adding &lt;a href=&#34;http://docs.gurock.com/testrail-admin/howto-installing-ioncube&#34;&gt;a proprietary PHP extension&lt;/a&gt;, then installing a LAMP environment, creating their database, &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-unix&#34;&gt;and some more stuff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It might not be so bad to do this once, but it never ends there. You always end up needing to reinstall several times. It also would be nice to be able to share the result with other developers so they can easily create their own staging servers.&lt;/p&gt;

&lt;h2 id=&#34;dockerizing-testrail&#34;&gt;Dockerizing TestRail&lt;/h2&gt;

&lt;p&gt;What would be really nice is to have a &lt;code&gt;Dockerfile&lt;/code&gt; that would do all the above work, making it simple to install and start a new staging server in a container. I looked around a bit to see if someone had already done this. I did find some prior attempts (such as &lt;a href=&#34;https://github.com/garethjevans/docker-testrail&#34;&gt;this one&lt;/a&gt;), but these only created a base image with some dependencies and not a full solution.&lt;/p&gt;

&lt;p&gt;I then proceeded to create a &lt;code&gt;Dockerfile&lt;/code&gt; that does a full installation.&lt;/p&gt;

&lt;p&gt;There were several challenges involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TestRail requires a database such as MySQL and a Web server such as Apache. To create a standalone solution, all of these should be included in the image.&lt;/li&gt;
&lt;li&gt;Several changes need to be made to system configuration files.&lt;/li&gt;
&lt;li&gt;A new database must be created during the installation.&lt;/li&gt;
&lt;li&gt;To complete the installation, an installation wizard must be run via the Web UI. This means that there is plenty of state to keep around.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could automate all this, it would be possible to create a new staging server with one &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-base-image&#34;&gt;Creating the Base Image&lt;/h2&gt;

&lt;p&gt;The TestRail &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-requirements&#34;&gt;installation requirements&lt;/a&gt; recommend installing Ubuntu LTS, as well as MySQL, PHP and Apache. In short, a standard LAMP stack. We pick Ubuntu 14.04 LTS, a.k.a. &lt;code&gt;trusty&lt;/code&gt;, since the latest release includes PHP 7 which doesn&amp;rsquo;t seem to be supported by TestRail.&lt;/p&gt;

&lt;p&gt;We therefore write the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; ubuntu:trusty&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y --no-install-recommends &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    php5 php5-cli php5-mysql php5-curl &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mysql-server &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    curl &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    unzip &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We add &lt;code&gt;curl&lt;/code&gt; since we&amp;rsquo;ll need it later to download things, and &lt;code&gt;unzip&lt;/code&gt; since TestRail comes as a zip file.&lt;/p&gt;

&lt;h2 id=&#34;installing-ioncube&#34;&gt;Installing ionCube&lt;/h2&gt;

&lt;p&gt;The ionCube PHP extension that TestRail requires is proprietary software, so we cannot distribute it. Instead, we download it automatically in the &lt;code&gt;Dockerfile&lt;/code&gt;. We then follow &lt;a href=&#34;http://docs.gurock.com/testrail-admin/howto-installing-ioncube&#34;&gt;the instructions&lt;/a&gt; to install it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; curl -O http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64_5.1.2.tar.gz &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    tar vxfz ioncube_loaders_lin_*.tar.gz &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    rm -f ioncube_loaders_lin_*.tar.gz

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;zend_extension=/ioncube/ioncube_loader_lin_5.5.so&amp;quot;&lt;/span&gt; &amp;gt; /etc/php5/cli/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    cat /etc/php5/cli/php.ini &amp;gt;&amp;gt; /etc/php5/cli/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mv /etc/php5/cli/php.ini.new /etc/php5/cli/php.ini &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;zend_extension=/ioncube/ioncube_loader_lin_5.5.so&amp;quot;&lt;/span&gt; &amp;gt; /etc/php5/apache2/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    cat /etc/php5/apache2/php.ini &amp;gt;&amp;gt; /etc/php5/apache2/php.ini.new &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    mv /etc/php5/apache2/php.ini.new /etc/php5/apache2/php.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we configure ionCube for both the CLI and Apache PHP versions, since both are used by TestRail: It uses the CLI version to run scheduled tasks.&lt;/p&gt;

&lt;h2 id=&#34;installing-testrail&#34;&gt;Installing TestRail&lt;/h2&gt;

&lt;p&gt;Since TestRail is proprietary software, we cannot redistribute it, nor can we download it automatically since the download requires a username and password. We therefore assume that you have downloaded it already to the current directory.&lt;/p&gt;

&lt;p&gt;We proceed to copy TestRail to the image, and unzip it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;COPY testrail-*.zip /
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;cd&lt;/span&gt; /var/www/html &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -q /testrail-*.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;completing-the-installation-automatically&#34;&gt;Completing the Installation Automatically&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&#34;http://docs.gurock.com/testrail-admin/installation-unix&#34;&gt;the instructions&lt;/a&gt;, to complete the installation, we now need to:
- Create the TestRail database
- Run its Installation Wizard
- Configure a background task to run&lt;/p&gt;

&lt;p&gt;The Web-based Installation wizard asks several questions, and as a result it creates a &lt;code&gt;config.php&lt;/code&gt; file. It would be great to avoid running it, and instead provide the answers directly. To achieve this, I ran the wizard once, and then saved the &lt;code&gt;config.php&lt;/code&gt; file. I then dumped the database contents using &lt;code&gt;mysqldump testrail &amp;gt; testrail.sql&lt;/code&gt;, so we can skip the wizard entirely. Instead, we copy the &lt;code&gt;config.php&lt;/code&gt; file to its location and recreate the database from the dumped data.&lt;/p&gt;

&lt;p&gt;Note that if you have an existing database that you want to use, you can dump is as described and replace the &lt;code&gt;testrail.sql&lt;/code&gt; file with your version.&lt;/p&gt;

&lt;p&gt;To complete the process, we copy the mentioned files to the image. We also provide a script, &lt;code&gt;run.sh&lt;/code&gt;, that will run when the container starts to complete the process.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;COPY config.php /var/www/html/testrail/config.php
COPY testrail.sql /
COPY run.sh /

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; /run.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;preparing-the-container-runtime&#34;&gt;Preparing the Container Runtime&lt;/h2&gt;

&lt;p&gt;We will now describe the &lt;code&gt;run.sh&lt;/code&gt; script that runs when the container starts.&lt;/p&gt;

&lt;p&gt;The first part creates the log directory required by TestRail, and starts the necessary background task via &lt;code&gt;cron&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/www/html/testrail/logs
chown www-data /var/www/html/testrail/logs

&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;* * * * * www-data /usr/bin/php /var/www/html/testrail/task.php&amp;#39;&lt;/span&gt; &amp;gt; /etc/cron.d/testrail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next parts run MySQL, and creates the database. Note that &lt;code&gt;init&lt;/code&gt; is not running in the container, but we can still start MySQL as usual by running its &lt;code&gt;init&lt;/code&gt; script.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/mysql start

&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;CREATE DATABASE testrail DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;CREATE USER &amp;#39;testrail&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;newpassword&amp;#39;;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;span style=&#34;color: #007020&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;GRANT ALL ON testrail.* TO &amp;#39;testrail&amp;#39;@&amp;#39;localhost&amp;#39;;&amp;quot;&lt;/span&gt; | mysql -u root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now load the contents of the database, originally created by the Installation Wizard:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mysql testrail &amp;lt; testrail.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finally, we start Apache and go to sleep so that the container will stay active.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/apache2 start
sleep infinity
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;building-the-image-and-starting-the-container&#34;&gt;Building the Image and Starting the Container&lt;/h1&gt;

&lt;p&gt;We can now build the Docker image:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker build -t testrail .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we can start the container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker run --name testrail -d -p 7070:80 testrail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we run the container in detached mode (&lt;code&gt;-d&lt;/code&gt;), and forward its port 80 to our local port 7070.&lt;/p&gt;

&lt;p&gt;We can now log into TestRail by browsing to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:7070/testrail/&#34;&gt;http://localhost:7070/testrail/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default user is &lt;code&gt;admin@admin.com&lt;/code&gt;, and the password is &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;keeping-your-data&#34;&gt;Keeping Your Data&lt;/h2&gt;

&lt;p&gt;Remember that any data you create will be lost when stopping the container. If you want to keep your data, connect to the container using &lt;code&gt;docker exec&lt;/code&gt;, then dump the data with &lt;code&gt;mysqldump&lt;/code&gt; and &lt;code&gt;docker cp&lt;/code&gt; it to your computer as &lt;code&gt;testrail.sql&lt;/code&gt;. The next time you can use it to restore the database.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We described how we created a fully automated process for installing and configuring a legacy LAMP application. Such a process makes it easy to create and destroy staging servers as needed without relying on any pre-existing state.&lt;/p&gt;

&lt;p&gt;If you want to recreate the Docker image, or create your own variant, feel free to get the above code from &lt;a href=&#34;https://github.com/gavrie/testrail&#34;&gt;its GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/ballance/5203638978/&#34;&gt;ballance&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mail to Lambda, Part 1</title>
      <link>http://philipson.co.il/post/mail-to-lambda/</link>
      <pubDate>Sun, 25 Sep 2016 13:58:46 +0300</pubDate>
      
      <guid>http://philipson.co.il/post/mail-to-lambda/</guid>
      <description>

&lt;p&gt;For a while now, I&amp;rsquo;ve been interested in experimenting with the new &lt;a href=&#34;http://martinfowler.com/articles/serverless.html&#34;&gt;Serverless&lt;/a&gt; fad and see what it is all about. The idea is that you don&amp;rsquo;t need to care any more about installing a real or virtual server, or even about creating a container image. Instead, you just write some code and deploy it somewhere in the cloud as a function.&lt;/p&gt;

&lt;p&gt;The hype is all about being able to scale your code without pain and being able to upgrade it easily, but of course this technology also makes it very easy to experiment without having to worry about the deployment method &lt;em&gt;du jour&lt;/em&gt; &amp;ndash; do I need to create a VM? A container? A pod? Nope, just a function.&lt;/p&gt;

&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;In the past I&amp;rsquo;ve used services such as Heroku and Google App Engine (which is now part of the Google Cloud Platform) that allow doing something similar, though the abstraction layer there is different. The classic App Engine (now called Standard Environment) has a special limited runtime, which requires adapting your code to use its specific APIs. Google has a newer version (called Flexible Environment) which is based on containers and allows writing more standard code. Unfortunately, it currently lacks the ability to receive email, which the older environment did support and which was needed for this experiment.&lt;/p&gt;

&lt;h2 id=&#34;going-serverless&#34;&gt;Going Serverless&lt;/h2&gt;

&lt;p&gt;The leading Serverless offerings include &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/functions/&#34;&gt;Google Cloud Functions&lt;/a&gt;. Initially I preferred to play with the newer Cloud Functions, but it is still in alpha and requires asking for access, which I did but have not yet received at the time of this writing. Another option is &lt;a href=&#34;https://azure.microsoft.com/en-us/services/functions/&#34;&gt;Azure Functions&lt;/a&gt;, but I haven&amp;rsquo;t yet had a chance to work with Azure and didn&amp;rsquo;t want to get sidetracked too much.&lt;/p&gt;

&lt;p&gt;So, AWS Lambda it is.&lt;/p&gt;

&lt;h2 id=&#34;the-project&#34;&gt;The Project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using the very nice &lt;a href=&#34;http://www.hourstrackerapp.com/&#34;&gt;HoursTracker app&lt;/a&gt; for quite a while now to manage my work hours. It allows me to easily track the amount of hours worked for several clients. When the time comes to report hours, I use the app&amp;rsquo;s export function to email myself a CSV file and then I do some manipulations on the data using &lt;a href=&#34;https://www.google.com/sheets/about/&#34;&gt;Google Docs&lt;/a&gt; before sharing them with the client.&lt;/p&gt;

&lt;p&gt;For a while now, I&amp;rsquo;ve wanted to automate these manipulations since they tend to become a bit tedious. Being one of those things you do once a month and take only ten minutes or so, it never became just important enough to me to actually go and automate. It was therefore a perfect candidate for playing with some new technology and possibly getting a usable result as a bonus.&lt;/p&gt;

&lt;h3 id=&#34;inventory-of-parts&#34;&gt;Inventory of Parts&lt;/h3&gt;

&lt;p&gt;I needed the following parts to assemble the full solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An email address to which I could send the exported data from the HoursTracker app.&lt;/li&gt;
&lt;li&gt;A service that would execute some custom code when a new mail is received at the above address.&lt;/li&gt;
&lt;li&gt;Some code that would process the email, extract the CSV data, manipulate it as needed, convert it to the final format, and send it to its destination.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The new stuff for me were the first two items, so I started with those.&lt;/p&gt;

&lt;h3 id=&#34;receiving-email&#34;&gt;Receiving Email&lt;/h3&gt;

&lt;p&gt;To receive emails in a way that would work with AWS Lambda, I used Amazon &lt;a href=&#34;https://aws.amazon.com/ses/&#34;&gt;Simple Email Service (SES)&lt;/a&gt;. Amazon provide clear &lt;a href=&#34;http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html&#34;&gt;instructions&lt;/a&gt; for setting it up, and I encountered no issues when following them.&lt;/p&gt;

&lt;p&gt;If you want to do the same thing, note that it requires having a custom domain for which you can modify DNS records. I chose to delegate a specific subdomain of my domain (e.g. &lt;code&gt;api.example.com&lt;/code&gt;) to Amazon&amp;rsquo;s &lt;a href=&#34;https://aws.amazon.com/route53/&#34;&gt;Route53&lt;/a&gt; DNS service, and &lt;a href=&#34;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-mx-record.html&#34;&gt;added an &lt;code&gt;MX&lt;/code&gt; record&lt;/a&gt; for that subdomain so that mails sent to it would be handled by SES. All this is explained in the documentation mentioned above.&lt;/p&gt;

&lt;p&gt;As part of completing the instructions, I then created a mail Receipt Rule for the address &lt;code&gt;hourstracker@api.example.com&lt;/code&gt; with an action that adds any received mail to a specific &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3 bucket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, the first part of the inventory is complete: We can receive emails sent to &lt;code&gt;hourstracker@api.example.com&lt;/code&gt;, and these are then stored in the &lt;code&gt;hourstracker&lt;/code&gt; S3 bucket, ready for further processing.&lt;/p&gt;

&lt;h3 id=&#34;next-time&#34;&gt;Next Time&lt;/h3&gt;

&lt;p&gt;Receiving and storing the mail brings us to the point where we can call our custom code to process it. This is where AWS Lambda comes in. In the next part of this series, we will write a simple function to get some information from the email, and will tell SES to call it when a new mail arrives.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/cimatti/4592329874/&#34;&gt;cimatti&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Python to Go</title>
      <link>http://philipson.co.il/post/from-python-to-go/</link>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/from-python-to-go/</guid>
      <description>

&lt;p&gt;I have been programming in Python in one capacity or another since around 2000. That&amp;rsquo;s almost 15 years. Over those years, I&amp;rsquo;ve come to know the language fairly well. I originally came to Python from C and Perl, and it was quite refreshing to come to a language that is simple to use, has a consistent syntax and library, and is quite powerful.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve worked on several small to large applications in Python since then, and reached a point where its limitations became quite visible. Ultimately this led me to Go. Below I&amp;rsquo;ll describe the process that led me there.&lt;/p&gt;

&lt;h3 id=&#34;taking-a-break-from-python&#34;&gt;Taking a Break From Python&lt;/h3&gt;

&lt;p&gt;At my current job I started work on developing an automated testing system from scratch. One of the first questions that came up was which programming language to use. I was quite certain that Python would no longer cut it, being simply too painful to develop large applications in. It took me a while to admit this to myself, having long been a staunch supporter of dynamic languages and having taught a long series of Python courses in which I defended the Python approach to Java and C++ programmers. But once I ceded this point, I went back looking for a statically typed language.&lt;/p&gt;

&lt;p&gt;Dynamic typing is wonderful and great, but in a large application the codebase simply becomes too complicated to understand and navigate. Python has a lot of &amp;ldquo;magic&amp;rdquo; features behind its deceptively simple façade, and it becomes tempting to do a lot of metaprogramming. One constant point of frustration was the large gap between the textual representation of the code and the runtime memory model: There is no direct mapping. It&amp;rsquo;s simply impossible to tell your editor to &amp;ldquo;go to definition&amp;rdquo; of a function or method and be sure that it reaches the correct target. Note that recent developments, such as &lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34;&gt;PEP 484 &amp;ndash; Type Hints&lt;/a&gt; and &lt;a href=&#34;http://mypy-lang.org/&#34;&gt;mypy&lt;/a&gt;, may change this in the future if they catch on.&lt;/p&gt;

&lt;p&gt;Another pain point is concurrency: A modern application need to do several things concurrently. Raw multithreading with mutexes and semaphores is an old and rusty programming model, which in any case is not very suitable to Python with its GIL limitation. And Gevent is very nice, but not a standard part of the language and very hard to debug.&lt;/p&gt;

&lt;p&gt;Yet another one is deployment: Python, and any other dynamic language, has a lot of baggage when deploying. It needs a runtime environment with all dependencies present. Yes, we have virtualenv and it&amp;rsquo;s great, but things could be made simpler.&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;re looking for a statically typed language with good support for concurrency and easy deployment. But which one?&lt;/p&gt;

&lt;h2 id=&#34;hello-go&#34;&gt;Hello, Go&lt;/h2&gt;

&lt;p&gt;At this point, I had read a lot about Go and played with it a bit. It promises a simple and modern language with static typing, great concurrency support, easy deployment and a large and exponentially growing community. Sounds almost too good to be true. Does it deliver?&lt;/p&gt;

&lt;p&gt;I accepted the challenge to convince my colleagues to give Go a try. Several alternatives were suggested. To begin with, several other languages were already in use at out company, including C, Java, Haskell, and Ruby. It would make sense to see if one of those would fit before adding yet another language to the pack. In addition, some colleagues suggested Scala and C++.&lt;/p&gt;

&lt;p&gt;For me, the matter was simple: Ruby is too similar to Python with its advantages and disadvantages. C, while being great for a high performance software core, is too low level for developing a whole automation solution. C++ is much too complicated a beast, and I don&amp;rsquo;t like it. Java sounds like an obvious contender, but it&amp;rsquo;s getting long in the tooth and I wanted something more modern and less &amp;ldquo;enterprisey&amp;rdquo;. Haskell sounds wonderful, but has a reputation of being hard to get right. Its acceptance in the industry is also less than I would hope for. Scala sounds nice, but would mainly benefit projects that already use the JVM.&lt;/p&gt;

&lt;p&gt;Of course, all of the above are my opinion only and I have no intention at this point of convincing anyone. I just wanted to reach the initial conclusion that giving Go a try might be a good idea.&lt;/p&gt;

&lt;h3 id=&#34;what-i-liked-about-go&#34;&gt;What I liked about Go&lt;/h3&gt;

&lt;p&gt;So, I started learning Go in earnest and writing some real code in it. There were several things that I liked a lot:&lt;/p&gt;

&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Syntax is simple and consistent. It feels somewhere between Python and C and level of abstractness. It reminds me of Pascal in several places: Declaring variables with &lt;code&gt;var&lt;/code&gt;, the &lt;code&gt;:=&lt;/code&gt; operator, the much stronger typing than C. Pascal was a language that I adored as a teenager, having done wonderful things in Borland&amp;rsquo;s Turbo Pascal (yes, I&amp;rsquo;m disclosing my age here).&lt;/li&gt;
&lt;li&gt;High level constructs such as slices and maps are built into the language with their own syntax.&lt;/li&gt;
&lt;li&gt;High order functions and closures are supported.&lt;/li&gt;
&lt;li&gt;Consistency everywhere: The syntax is consistent, as is the standard library. There is a consistent coding style with well-defined rules. While this may sound like a headache that limits expressivity, it makes third party code a joy to read and understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toolset&#34;&gt;Toolset&lt;/h4&gt;

&lt;p&gt;The toolset is absolutely wonderful. Following the UNIX philosophy, the Go community has created several strong tools that each does one thing very well. Those tools integrate with the command line and with you editor to deliver a great development experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;godoc&lt;/code&gt; handles documentation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gofmt&lt;/code&gt; formats code consistently&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gocode&lt;/code&gt; autocompletes your code by analysis of actually built code so its results are precise&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gorename&lt;/code&gt; handles renames in a type-safe way&lt;/li&gt;
&lt;li&gt;&lt;code&gt;godef&lt;/code&gt; find the definition of every construct you point it at&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oracle&lt;/code&gt; does amazing code analysis that gives you insight into the flow of your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combine all those with &lt;code&gt;vim-go&lt;/code&gt; which makes all those tools accessible from Vim with a keystroke, and you have the ideal developer setup.&lt;/p&gt;

&lt;h4 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h4&gt;

&lt;p&gt;Concurrency! Channels are Go&amp;rsquo;s way of handling concurrency and they&amp;rsquo;re marvelous. Go is the only language I&amp;rsquo;ve worked in so far that does not need to distinguish between asynchronous and synchronous code: You simply write as if everything is synchronous. This reminds one of Python&amp;rsquo;s &lt;code&gt;gevent&lt;/code&gt;, but in Go it&amp;rsquo;s native to the language and used everywhere. There is no need to manually manage futures/promises/threads/locks/mutexes, or to carefully consider if code should be asynchronous or not. This reduces the maintenance burden significantly.&lt;/p&gt;

&lt;h3 id=&#34;what-took-time-to-get-used-to&#34;&gt;What took time to get used to&lt;/h3&gt;

&lt;p&gt;Some things in Go took time to get used to, and I&amp;rsquo;m not sure yet whether I like them or not:&lt;/p&gt;

&lt;h4 id=&#34;error-handling&#34;&gt;Error Handling&lt;/h4&gt;

&lt;p&gt;Error handling is explicit. Errors are returned as values from functions (using a special &lt;code&gt;error&lt;/code&gt; type). Together with multi-valued returns, this is much better than C&amp;rsquo;s error handling, but much less intuitive than Python&amp;rsquo;s exceptions. You are forced to consider every error at its site of origin. Tools like &lt;code&gt;errcheck&lt;/code&gt; help ensure that you don&amp;rsquo;t miss any. While it&amp;rsquo;s much easier to write code using exceptions, it&amp;rsquo;s nice to be forced to copy with errors and not forget about them until your code breaks. I believe this leads to more robust code, which is a worthwhile price to pay. One exception is &amp;ldquo;end user&amp;rdquo; code such as tests that begin to look very tedious with explicit error handling. It may be worthwhile to use &lt;code&gt;panic&lt;/code&gt;/&lt;code&gt;recover&lt;/code&gt; for such code.&lt;/p&gt;

&lt;h4 id=&#34;generics&#34;&gt;Generics?&lt;/h4&gt;

&lt;p&gt;Yes, everyone says it so I will too: Go doesn&amp;rsquo;t support generics for custom data types. While its built-in maps and slices are generic, you can&amp;rsquo;t write your own &lt;code&gt;set&lt;/code&gt; type and have it support sets of &lt;code&gt;int&lt;/code&gt; or of &lt;code&gt;string&lt;/code&gt; without duplicating code. In practice this has not been a great concern for me so far, apart from having to occasionally supply multiple versions of &lt;code&gt;Max&lt;/code&gt; or &lt;code&gt;Shuffle&lt;/code&gt; functions with identical logic for different types. There are several approaches for generics support that make use of interfaces or of code generation, and one of those may become an accepted norm. Even if not, the current situation is quite bearable.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/crapeye/14134681339/&#34;&gt;crapeye&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A subprocess bug? Nah.</title>
      <link>http://philipson.co.il/post/a-subprocess-bug-nah/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/a-subprocess-bug-nah/</guid>
      <description>

&lt;p&gt;A few weeks ago, a colleague came to me with an interesting bug: When running a child process with Python&amp;rsquo;s &lt;code&gt;subprocess&lt;/code&gt; module, no exception is thrown when the child process fails. In essence, what happened was the following (typed at the interactive Python prompt):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;check_call(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;)
&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;false&lt;/code&gt; command always exits with a nonzero exit code. The expected behavior, as confirmed on another machine, would be as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;check_call(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;)
Traceback (most recent call last):
  File &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  File &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py&amp;quot;&lt;/span&gt;, line &lt;span style=&#34;color: #40a070&#34;&gt;542&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; check_call
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;raise&lt;/span&gt; CalledProcessError(retcode, cmd)
subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;CalledProcessError: Command &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt; returned non&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;zero &lt;span style=&#34;color: #007020&#34;&gt;exit&lt;/span&gt; status &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, what happens is that &lt;code&gt;subprocess&lt;/code&gt; thinks that the child process exited successfully, even though it did not.&lt;/p&gt;

&lt;p&gt;This behavior, of course, wreaks total havoc with the application. Instead of an exception being thrown due to the failed child process, the application goes on and fails at a later point when it tries to do something based on the data received from the child process. This goes against the good design principle of &lt;a href=&#34;http://en.wikipedia.org/wiki/Fail-fast&#34;&gt;failing early&lt;/a&gt;, as embodied by the way Python uses exceptions instead of error codes.&lt;/p&gt;

&lt;p&gt;So, what is going on here? You may want to think it through and see if you can find the problem.&lt;/p&gt;

&lt;h2 id=&#34;diving-in&#34;&gt;Diving In&lt;/h2&gt;

&lt;p&gt;At first sight, this looks like a problem with either Python itself or with the OS (Linux, in our case). How could this happen?  The colleague who first encountered this issue looked at it through the Python debugger, and got as far as the &lt;code&gt;wait()&lt;/code&gt; function of &lt;code&gt;subprocess&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;wait&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;):
    &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Wait for child process to terminate.  Returns returncode attribute.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;returncode &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
            pid, sts &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _eintr_retry_call(os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;waitpid, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pid, &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;OSError&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; e&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;errno &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; errno&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ECHILD:
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;raise&lt;/span&gt;
            &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# This happens if SIGCLD is set to be ignored or waiting&lt;/span&gt;
            &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# for child processes has otherwise been disabled for our&lt;/span&gt;
            &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# process.  This child is dead, we can&amp;#39;t get the status.&lt;/span&gt;
            pid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pid
            sts &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Check the pid and loop as waitpid has been known to return&lt;/span&gt;
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# 0 even without WNOHANG in odd situations.  issue14396.&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; pid &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pid:
            &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_handle_exitstatus(sts)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;returncode
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As seen in the code, if &lt;code&gt;os.waitpid&lt;/code&gt; on a child process fails with &lt;code&gt;ECHILD&lt;/code&gt;, an exception is not raised. The reason for this is that &lt;code&gt;ECHILD&lt;/code&gt; is returned in cases where there is no child process to be waited for. Normally, when a process terminates, the kernel keeps information such as its exit code until the parent calls &lt;code&gt;wait()&lt;/code&gt; on it. In the interim, the process is a so-called &amp;ldquo;zombie&amp;rdquo;. If there is no child process (even not a zombie), we cannot know if it succeeded or failed.&lt;/p&gt;

&lt;p&gt;The above piece of code went into Python&amp;rsquo;s &lt;code&gt;subprocess&lt;/code&gt; module as part of a fix for another problem, as documented in &lt;a href=&#34;http://bugs.python.org/issue1731717&#34;&gt;this Python bug report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Python chooses to assume that the child process exited successfully. Is this a correct assumption? Well, it&amp;rsquo;s as good as any other. In the legitimate use case, namely when a process explicitly ignores &lt;code&gt;SIGCHLD&lt;/code&gt; since it isn&amp;rsquo;t interested in the exit code of its child processes, it makes sense for &lt;code&gt;waitpid()&lt;/code&gt; to always complete successfully. Of course this can be argued against, but it is not a senseless assumption.&lt;/p&gt;

&lt;h3 id=&#34;back-to-the-code&#34;&gt;Back to the Code&lt;/h3&gt;

&lt;p&gt;Do we by any chance ignore &lt;code&gt;SIGCHLD&lt;/code&gt; in our application? The chance we do is very small, since we run a lot of child processes and depend on their state all their time, and this fails only occasionally. A quick &lt;code&gt;git grep&lt;/code&gt; on the code shows that we &lt;em&gt;do&lt;/em&gt; ignore &lt;code&gt;SIGCHLD&lt;/code&gt; in one specific standalone Python script, but that script is not part of the application and is run on a remote machine on which we indeed &lt;em&gt;should&lt;/em&gt; ignore this signal.&lt;/p&gt;

&lt;p&gt;At this point, I suspected (wrongly, as we shall see) that this was a problem with the specific host on which it happened, and resolved the issue as &amp;ldquo;Can&amp;rsquo;t reproduce&amp;rdquo;. Since this happened more than once, this was not ideal, so I asked other team members to keep an eye open in case this happened again.&lt;/p&gt;

&lt;h3 id=&#34;a-week-later&#34;&gt;A Week Later&lt;/h3&gt;

&lt;p&gt;Of course, a week later it happened again. Fortunately, this time it was caught as it happened and we could look at the live process in the debugger. My colleague &lt;a href=&#34;https://plus.google.com/107274679081446769903/&#34;&gt;Erez Horev&lt;/a&gt; called me over and we started looking at it together.&lt;/p&gt;

&lt;p&gt;We easily reproduced the issue in the debugger. After a lot of dead ends, we concluded that the only logical way of this happening was indeed if the application ignored &lt;code&gt;SIGCHLD&lt;/code&gt;. To check if this was the case, we ran the following in the debugger:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getsignal(signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SIGCHLD)
&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SIG_IGN
&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Indeed &amp;ndash; &lt;code&gt;SIGCHLD&lt;/code&gt; is being ignored by our application. How can this be? Nowhere in the code do we ignore &lt;code&gt;SIGCHLD&lt;/code&gt;, except for that standalone script, which runs only on the remote machine. Or does it?&lt;/p&gt;

&lt;h3 id=&#34;checking-our-assumptions&#34;&gt;Checking our Assumptions&lt;/h3&gt;

&lt;p&gt;At this point, the only thing left to do was to look at that script. It includes the following line, right at the top.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;signal(signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SIGCHLD, signal&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SIG_IGN)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Could we, by any chance, have &lt;code&gt;imported&lt;/code&gt; this script as a module in our application, therefore running the above code as a side effect?&lt;/p&gt;

&lt;p&gt;It turns out we were doing exactly that. In recently added code, under specific circumstances, our application imports the module in order to get its filename and to deploy it to the remote machine. While normally &lt;code&gt;import&lt;/code&gt; should be clean of side effects, the above &lt;code&gt;signal&lt;/code&gt; code appears at the module level and not inside a function, and is therefore run when imported. This contaminates our application and causes it to ignore &lt;code&gt;SIGCHLD&lt;/code&gt; with the described consequences.&lt;/p&gt;

&lt;p&gt;Moving this line fixed the problem.&lt;/p&gt;

&lt;h3 id=&#34;question-everything&#34;&gt;Question Everything&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bignerdranch.com/about-us/nerds/mark-dalrymple.html&#34;&gt;Mark Dalrymple&lt;/a&gt;, in his &lt;a href=&#34;http://www.bignerdranch.com/blog/thoughts-on-debugging-part-1/&#34;&gt;Thoughts on Debugging, Part 1&lt;/a&gt;, talks about the hierarchy of potential blame when debugging. In short, new code is the first suspect, after which come old code, library code etc. The point here is that the chance of there being a bug in Python is much smaller than that of there being a bug in your own code. Not only that, but the chance of the bug being in new code is the highest.&lt;/p&gt;

&lt;p&gt;The idea of there being a bug in Python or an OS issue might have been valid, but it was not likely. The assumption that this &lt;em&gt;could not happen&lt;/em&gt; since the relevant code does not run turned out to be false. The bug was indeed in our code, and in new code at that.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As a lesson from this, aside from some debugging ideas, please remember: Don&amp;rsquo;t run any code that may have side effects at the module top level! Somehow, some day, your module will be imported by other code that may be hurt by this side effect. Put all code in functions, or use the Python &lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt; construct.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/searleb/3122477836/&#34;&gt;searleb&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buffers will fill up... eventually</title>
      <link>http://philipson.co.il/post/buffers-will-fill-up-eventually/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/buffers-will-fill-up-eventually/</guid>
      <description>

&lt;p&gt;A colleague asked me to look into a problem with him, mentioning that &amp;ldquo;Tlib hangs when we run it&amp;rdquo;. Tlib is a fairly large project that is written in Python. His initial analysis showed that it hangs at a very early phase, during with it tries to fetch the latest version to run from a git server.&lt;/p&gt;

&lt;p&gt;Various users complained about the same problem, suggesting that it is not a local issue.&lt;/p&gt;

&lt;p&gt;Running the code, and interrupting it with &lt;code&gt;^C&lt;/code&gt; when it hangs, turned up a result similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^CTraceback (most recent call last):
  File &amp;quot;./execute_wrong.py&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    retval, out, err = execute(&amp;quot;git ls-remote&amp;quot;)
  File &amp;quot;./execute_wrong.py&amp;quot;, line 5, in execute
    retval = p.wait()
  File &amp;quot;/usr/lib/python2.7/subprocess.py&amp;quot;, line 1376, in wait
    pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
  File &amp;quot;/usr/lib/python2.7/subprocess.py&amp;quot;, line 476, in _eintr_retry_call
    return func(*args)
KeyboardInterrupt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting. The code seems to hang while waiting for the &lt;code&gt;git&lt;/code&gt; child process to terminate. However, running &lt;code&gt;git ls-remote&lt;/code&gt; from the command line works fine, so why does it hang when run from the code?&lt;/p&gt;

&lt;h1 id=&#34;investigating-the-issue&#34;&gt;Investigating the Issue&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s look at the code history to see if anything has changed recently.&lt;/p&gt;

&lt;p&gt;Nope. A quick &lt;code&gt;git blame&lt;/code&gt; shows that this code is more than 5 years old, and has been performing flawlessly every day since then. So what else has changed?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what is happening while waiting for the &lt;code&gt;git&lt;/code&gt; child process to finish, by running &lt;code&gt;strace&lt;/code&gt; on the process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ strace -p 5774
Process 5774 attached
write(1, &amp;quot;pull/624/merge\n2fe9da91f5a4b5ba3&amp;quot;..., 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK. The process is trying to write to &lt;code&gt;stdout&lt;/code&gt;, but hanging while doing so. It looks like some buffer is getting filled, which blocks the process from writing further.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the size of the data returned by the child process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git ls-remote | wc -c
From gitserver:/git/qa/tlib
   65572
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! This number looks suspiciously like &amp;ldquo;a bit more than 64k&amp;rdquo;. Which affirms our hypothesis. Let&amp;rsquo;s try to reduce its size by deleting some old remote branches:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin :old_branch1
$ git push origin :old_branch2
...
$ git ls-remote | wc -c
From gitserver:/git/qa/tlib
   65368
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to run the program again&amp;hellip; It worked! The program continues to run successfully.&lt;/p&gt;

&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;

&lt;p&gt;Here is what the original code looked like (slightly changed to protect the innocent). Can you spot what is wrong?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;execute&lt;/span&gt;(command):
    p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;Popen(command, shell&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;True&lt;/span&gt;, stdout&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;PIPE, stderr&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;PIPE)
    retval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wait()
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; retval, p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;read(), p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;stderr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;read()

retval, out, err &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; execute(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;git ls-remote&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that we &lt;code&gt;wait()&lt;/code&gt; for the process to terminate, without reading its output. Only after it terminates do we read its output. This code has worked correctly for years, since the output so far happened to be smaller than 64k and fitted completely in the pipe&amp;rsquo;s buffer. Once it exceeded the buffer&amp;rsquo;s size due to one remote branch too many, it blocked the process on the pipe, while the parent was waiting for it to terminate. A classic deadlock condition.&lt;/p&gt;

&lt;h1 id=&#34;fixing-the-problem&#34;&gt;Fixing the Problem&lt;/h1&gt;

&lt;p&gt;Now that we see the problem, fixing it is simple: First read, then wait.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;execute&lt;/span&gt;(command):
    p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;Popen(command, shell&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;True&lt;/span&gt;, stdout&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;PIPE, stderr&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;PIPE)
    out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;read()
    err &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;stderr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;read()
    retval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wait()
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; retval, out, err

retval, out, err &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; execute(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;git ls-remote&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, as Alon Horev and Baruch Even pointed out in their comments, this is still not correct. Since we try to read from &lt;code&gt;stdout&lt;/code&gt; until it gets an EOF and only then try to read from &lt;code&gt;stderr&lt;/code&gt;, the &lt;code&gt;stderr&lt;/code&gt; pipe&amp;rsquo;s buffer can fill up if the child process writes a lot of data to it.&lt;/p&gt;

&lt;p&gt;The correct solution involves reading from both pipes in tandem. The &lt;code&gt;communicate()&lt;/code&gt; method of the &lt;code&gt;Popen&lt;/code&gt; class implements this using the &lt;code&gt;select()&lt;/code&gt; system call on POSIX, and with threads on Windows platforms.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Buffers, filesystems, databases will all fill up sometime in the future. Always take this into account when writing code. Any time you generate some data, be sure to set up a process to prune the data and don&amp;rsquo;t assume that it will be OK &amp;ndash; because it will come back to bite you, or at least some future user of your code.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;sub&gt;Banner image by &lt;a href=&#34;https://www.flickr.com/photos/photofarmer/14117597485&#34;&gt;photofarmer&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I don&#39;t like &#39;Transparent&#39; RPC</title>
      <link>http://philipson.co.il/post/why-i-dont-like-rpc/</link>
      <pubDate>Wed, 20 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/why-i-dont-like-rpc/</guid>
      <description>

&lt;p&gt;Lately I&amp;rsquo;ve been working on modifying an architectural aspect of an existing software project. This project makes heavy use of remote execution of code on several hosts. To accomplish this feat, it uses several different methods for remote execution: SSH for running general shell commands, RPyC for executing arbitrary Python code remotely, as well as a couple of proprietary interfaces.&lt;/p&gt;

&lt;p&gt;One issue I encountered with the current design is that it is quite difficult to make a clean separation between code running locally and code running remotely. This turns debugging any problem involving execution of remote code into an incredibly complicated endeavor.&lt;/p&gt;

&lt;p&gt;Much clarity could be gained by changing the architecture of this project to be more explicitly distributed. This would involve several agents running on multiple hosts that communicate amongst themselves to get the work done. The agents would have a clean and documented API, making them usable and testable as standalone components, as well as allowing them to act on behalf of a central process. All remote execution would be explicit, using one single method for any kind of execution &amp;ndash; be it shell commands, Python code or anything else.&lt;/p&gt;

&lt;h2 id=&#34;some-of-the-problems-with-rpc&#34;&gt;Some of the Problems with RPC&lt;/h2&gt;

&lt;p&gt;Our existing codebase makes heavy use of &lt;a href=&#34;http://rpyc.sourceforge.net/&#34;&gt;RPyC&lt;/a&gt;, a native Python RPC implementation, for remote execution of arbitrary Python code on remote machines.&lt;/p&gt;

&lt;p&gt;Using a variant of RPC sounds like a great solution. RPyC is also a very nice and seamless tool. Code that is running remotely looks just like code that is running locally. Which is the exact reason for why I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; like using it: I don&amp;rsquo;t want transparent RPC! I want it to be immediately clear which code runs locally and which code runs remotely. &amp;ldquo;Seamless&amp;rdquo; RPC encourages the writing of spaghetti code, because it&amp;rsquo;s so easy to mix local and remote code. This makes it deceptively easy to write distributed code without thinking about the design of the API and about which parts should reside on each side of the connection. Code can quickly become an intermix of RPC calls with local calls, causing it to be an opaque blob that is impossible to test or debug. In addition, its performance can quickly deteriorate: Objects are being serialized back and forth all the time, and tens of implicit network round-trips introduce latency all around the code.&lt;/p&gt;

&lt;p&gt;Of course, the tool is not necessarily at blame here. The problem may lie with those developers who use it incorrectly, instead of designing a clean distributed model around it &amp;ndash; which is certainly possible. But I tend to find that the thoughts and practices of developers become molded to the tools they have at hand. A tool that encourages calling remote code without a conscious effort makes it too easy to avoid thinking about the distributed design.&lt;/p&gt;

&lt;p&gt;So, yes, I don&amp;rsquo;t like RPC, especially not &lt;em&gt;stateful RPC&lt;/em&gt; that supports access of remote objects by reference. I can live with simple designs like XML-RPC, supporting value-based RPC with native data types, which are fairly easy to understand and debug: There are no remote objects, just data that is passing back and forth. But I dislike tools that try to hide everything under a shiny exterior, and try to act as if remote code were just the same as local code, and as if remote objects actually exist locally with magic proxies doing all the work behind the scenes.&lt;/p&gt;

&lt;p&gt;The above is just one of the issues in the long-standing debate regarding RPC vs. Messaging. If you&amp;rsquo;re at all interested in this debate, I heartily recommend reading some of the &lt;a href=&#34;http://steve.vinoski.net/blog/category/rpc/&#34;&gt;articles by Steve Vinoski&lt;/a&gt;, who is a leading expert on the matter and writes on it very eloquently. &lt;a href=&#34;http://qconlondon.com/dl/qcon-london-2009/slides/SteveVinoski_RPCAndItsOffspringConvenientYetFundamentallyFlawed.pdf&#34;&gt;This presentation&lt;/a&gt; summarizes his viewpoint quite nicely, and I quite agree with many of his points.&lt;/p&gt;

&lt;h3 id=&#34;what-now&#34;&gt;What Now?&lt;/h3&gt;

&lt;p&gt;So, I&amp;rsquo;m looking for a good tool to create a distributed architecture that is based on explicit message passing. It should be able to send and receive native Python data types by value. It should be nicely designed, clearly documented, and should make the distinction between local code and remote code crystal clear to the developer.&lt;/p&gt;

&lt;p&gt;I am currently investigating and evaluating several solutions. Most of them are based on the excellent ZeroMQ messaging library, along with some kind of serialization tool such as MsgPack. There are several good candidates. I&amp;rsquo;ll write more about it as I make progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The YAGNI/NIH conundrum</title>
      <link>http://philipson.co.il/post/the-yagni-slash-nih-conundrum/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/the-yagni-slash-nih-conundrum/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; This post is about software development, but it is more about the human side of it than about the technical side. This means you may enjoy it even if you&amp;rsquo;re not a software developer (or a technical person at all).&lt;/p&gt;

&lt;p&gt;One of the recurring issues that I encounter as a software developer is that of having to decide where on the scale between YAGNI and NIH I want to be. You are probably wondering what the hell I am talking about  (unless you&amp;rsquo;re one of those people who are nodding your head now and smiling), so I&amp;rsquo;ll explain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/YAGNI&#34;&gt;YAGNI&lt;/a&gt; stands for &amp;ldquo;You ain&amp;rsquo;t gonna need it&amp;rdquo;, and refers to a software development principle according to which you don&amp;rsquo;t want to start writing a huge bunch of code up front until you know exactly what you are going to need. Since software requirements change all the time, and one of the common maladies of many code bases is superfluous complexity due to over-engineering and over-abstraction, it makes a lot of sense to implement only what you know you are going to need right now, and leave the rest for later.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Not_invented_here&#34;&gt;NIH&lt;/a&gt; stands for &amp;ldquo;Not Invented Here&amp;rdquo;, and refers to a reluctance among some software developers to base their work on code written by someone else: &amp;ldquo;Hey, I can do this myself, so why should I use this existing project&amp;rdquo;? This leads people to reinvent the wheel time and again, creating a proliferation of half-baked solutions to problems that have been solved fairly well at other times and places. In addition to the waste of resources in the creating the solution in the first place, it also creates yet another maintainability headache.&lt;/p&gt;

&lt;h2 id=&#34;the-conundrum&#34;&gt;The Conundrum&lt;/h2&gt;

&lt;p&gt;I consider myself a firm believer in the YAGNI principle, and a staunch opponent of the NIH syndrome: I try to avoid writing code that could stay unwritten, since I consider a large codebase a liability rather than an asset. Writing more code means having to expend more resources on maintaining it. In many corporate cultures, it also decreases the ability to respond to change, due to a reluctance to throw away existing code (which is often due to sentimental reasons rather than objective ones).&lt;/p&gt;

&lt;p&gt;Now, as software developers, many of us would much rather write new code than maintain a bunch of old code.&lt;/p&gt;

&lt;p&gt;One reason for this is that old code bases tend to have accumulated a lot of baggage over the years, and we love the idea of getting rid of all that and starting with a fresh, blank page: All those old bugs can be forgotten, all those workarounds and little tricks can be left behind.&lt;/p&gt;

&lt;p&gt;Another reason is that good developers love to learn new ideas and techniques and are itching to try them out. Seeing our own old code after a few months or years make us cringe with the feeling, &amp;ldquo;who was the idiot that wrote this?!&amp;rdquo;. We are sure that the code we&amp;rsquo;re going to write now, with our new and shiny tools, will be better by leaps and bounds. And then the cycle starts all over again.&lt;/p&gt;

&lt;h2 id=&#34;coding-in-the-corporate-world&#34;&gt;Coding in the Corporate World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d like to argue that in the corporate world, as opposed to the Open Source world, writing new code can be an irresponsible thing to do. In the corporate world, we write code not just to scratch our own itches. We&amp;rsquo;re creating something that may very well continue to exist long after we have moved on to greener pastures. Other people will have to maintain what we created. Adhering to good software engineering principles means that not only our own lives will be easier down the road, but also those of other people.&lt;/p&gt;

&lt;p&gt;Now, those who profess not to care about the experience of other people, or who think that at the very least it is less important that their own experience, may want to consider a few points:&lt;/p&gt;

&lt;p&gt;First of all, those &amp;ldquo;other people&amp;rdquo; may be yourselves a few months or years from now, trying to adapt your own code to new requirements. Suddenly, all this code is no longer new nor fun, and you&amp;rsquo;ll have to dig in to adapt it to the required changes.&lt;/p&gt;

&lt;p&gt;Second, those other people may be your future co-workers, managers or employees. They will remember what you left them with.&lt;/p&gt;

&lt;p&gt;Third, people will appreciate your efforts to make their lives easier (or at least won&amp;rsquo;t hate you for making it harder). This increases the likelihood that they will want to work with you in the future.&lt;/p&gt;

&lt;p&gt;So all this makes sense even from a perfectly selfish point of view.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When faced with a new software problem to solve, I always spend a significant amount of energy in investigating existing solutions and see if they can work for me. I will resort to writing code only if I fail to find a solution that has enough similarity or has a good enough quality. Of course, as my friend Eli claims, this may very well mean that I often pass on the chance to be creative by deferring to existing solutions. But that&amp;rsquo;s something I can live with: I feel the need to reach the right balance between creativity and responsibility.&lt;/p&gt;

&lt;p&gt;I can find creativity in ways other than writing a lot of new code: I&amp;rsquo;d rather leverage existing code that I like and that is maintained by a third party (which becomes more and more commong with the huge Open Source ecosystem). It is more important to me to feel happy with a solution than it is to prove to myself that I can solve a problem that has been solved before by others. That just seems so wasteful.&lt;/p&gt;

&lt;p&gt;In an upcoming post, I will analyze a specific case that I encountered in light of the above thoughts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating virtual FC WWPNs for a storage lab</title>
      <link>http://philipson.co.il/post/generating-virtual-fc-wwpns-for-a-storage-lab/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/generating-virtual-fc-wwpns-for-a-storage-lab/</guid>
      <description>

&lt;p&gt;At work, I encountered an interesting problem: While testing the Fibre Channel (FC)
scalability of a storage product, we needed to create a &lt;em&gt;lot&lt;/em&gt; of FC connections between hosts and the storage system. This would in turn require a large number of FC Initiators, each of which having a unique &lt;a href=&#34;http://en.wikipedia.org/wiki/World_Wide_Port_Name&#34;&gt;World-Wide Port Name (WWPN)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest and cheapest method to set up a lot of initiators without actually purchasing zillions of FC HBAs would be to use &lt;a href=&#34;http://en.wikipedia.org/wiki/NPIV&#34;&gt;N_Port ID Virtualization&lt;/a&gt;, a.k.a. NPIV. This method allows a single FC HBA to present itself to the FC fabric with multiple WWPNs. This, in turn, allows the creation of many connections to the target storage device from a small number of hosts.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;WWPNs can&amp;rsquo;t just be pulled out of thin air. They are allocated &amp;ndash; in chunks &amp;ndash; by a central authority, the &lt;a href=&#34;http://standards.ieee.org/develop/regauth/&#34;&gt;IEEE Registration Authority&lt;/a&gt;. Just making up random WWPNs could cause trouble for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The WWPN must be unique on the fabric, which means it must be generated in a deterministic way so that two hosts won&amp;rsquo;t be using the same WWPN and thereby confuse the fabric.&lt;/li&gt;
&lt;li&gt;The WWPN should not have a chance of clashing with official WWPNs of purchased HBAs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With physical (as opposed to virtual) HBAs, this is managed by allocating a OUI (Organizationally Unique Identifier) to every vendor, who in turns tacks on his own vendor-specific serial number to come up with a unique WWPN. This is similar to the MAC address allocation of Ethernet, Wi-Fi and Bluetooth devices.&lt;/p&gt;

&lt;p&gt;The textbook solution for our problem would have involved the use of an officially allocated OUI to generate legal WWPNs, but that seemed like overkill for lab project which would never be used on a production SAN.&lt;/p&gt;

&lt;h2 id=&#34;some-background&#34;&gt;Some Background&lt;/h2&gt;

&lt;p&gt;We now require a kind of a compromise which takes care of the above two issues without causing too much bureaucratic pain. To reach such a solution, we&amp;rsquo;ll refer to the IEEE&amp;rsquo;s &lt;a href=&#34;http://standards.ieee.org/develop/regauth/tut/fibre.pdf&#34;&gt;Guidelines for Fibre Channel Use of the Organizationally Unique Identifier (OUI)&lt;/a&gt;, and cheat a bit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we have an FC HBA with a WWPN of &lt;code&gt;10:00:00:00:c9:93:53:6d&lt;/code&gt;.
We&amp;rsquo;ll decode it according to the IEEE Guidelines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10:00:vv:vv:vv:ss:ss:ss
\___/ \______/ \______/
  |      |        |
  |      |        |
  |      |         \__ Vendor-specific part (24 bits)
  |      |
  |       \__ Vendor OUI (24 bits)
  |
   \__ This WWPN uses the Original WWN format
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to this diagram, our sample WWPN contains the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;10:00&lt;/code&gt; prefix means that it uses the original WWN format (a.k.a. &amp;ldquo;NAA IEEE 48-bit address format&amp;rdquo;), as opposed to newer formats that starting with another sequence&lt;/li&gt;
&lt;li&gt;The vendor is &lt;code&gt;00:00:c9&lt;/code&gt;, which is an OUI belonging to Emulex Corporation
(according to the &lt;a href=&#34;http://standards.ieee.org/develop/regauth/oui/oui.txt&#34;&gt;OUI list&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The vendor-specific part is &lt;code&gt;93:53:6d&lt;/code&gt;, which is 24 bits long&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-one-wwpn-to-generate-many-new-ones&#34;&gt;Using One WWPN to Generate Many New Ones&lt;/h2&gt;

&lt;p&gt;For every physical WWPN, we need to be able to generate up to 256 virtual WWPNs to be used with NPIV (assuming that each HBA port supports up to 256 virtual ports). The trick lies in reusing the vendor-specific part to generate multiple WWPNs per physical port, each of which would be guaranteed to be unique throughout the lab.&lt;/p&gt;

&lt;p&gt;For that, we rely on the existence of a newer WWN format (&amp;ldquo;NAA IEEE Registered&amp;rdquo;) that has more space for the vendor-specific part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5v:vv:vv:vs:ss:ss:ss:ss
|\_______/\___________/
|   |        |
|   |        |
|   |         \__ Vendor-specific part (extended to 36 bits)
|   |
|    \__ Vendor OUI (still 24 bits)
|
 \__ Newer WWN format (NAA IEEE Registered)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good, we now have 36 bits for the vendor-specific part!&lt;/p&gt;

&lt;p&gt;We will use the larger vendor-specific field to include &lt;em&gt;both&lt;/em&gt; the vendor-specific part of the physical ports WWPN (which is just 24 bits), &lt;em&gt;and&lt;/em&gt; our own 12-bit custom part. This will let us generate up to 2&lt;sup&gt;12&lt;/sup&gt; = 4096 virtual ports per physical port, which is more than enough.&lt;/p&gt;

&lt;p&gt;Just to be safe, and to avoid a future clash with HBAs from the same vendor who might use the new numbering scheme as well, we&amp;rsquo;ll modify the OUI to a currently unused one (&lt;code&gt;0000c8&lt;/code&gt; instead of &lt;code&gt;0000c9&lt;/code&gt;). This is of course not 100% future-proof, but is good enough for our purposes.&lt;/p&gt;

&lt;p&gt;This leads us to the following range of generated WWPNs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Original WWPN:

    10:00:00:00:c9:93:53:6d, semantically represented as:

    1000 0000c9 93536d
         \____/ \____/
           |      |
         vendor   |
                serial

Generated WWPN range:

    5 0000c8 93536d 000
    5 0000c8 93536d 001
    5 0000c8 93536d 002
    ...
    5 0000c8 93536d fff
      \____/ \____/ \_/
        |      |     |
      vendor   |    custom
             serial
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While still being a hack, the above scheme allows us to generate as many WWPNs as we need.&lt;/p&gt;

&lt;p&gt;It has the advantage of being intuitive, since it is easy to determine just by looking at the WWPNs which ones of them are physical (starting with &lt;code&gt;1000 0000c9&lt;/code&gt;) and which are virtual (starting with &lt;code&gt;5 0000c8&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It also makes it easy to see which virtual WWPNs belong to each physical port, which is important for debugging purposes: The serial number of the physical port (&lt;code&gt;93536d&lt;/code&gt;) is part of the virtual port&amp;rsquo;s WWPN as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving readability and flow control in Python</title>
      <link>http://philipson.co.il/post/improving-readability-and-flow-control-in-python/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/post/improving-readability-and-flow-control-in-python/</guid>
      <description>

&lt;p&gt;Recently, a colleague and I refactored a piece of existing code that had new
behavior added to it. During the process, we managed to improve the readability of the
code using several techniques that I&amp;rsquo;ll describe below.&lt;/p&gt;

&lt;h2 id=&#34;where-we-started&#34;&gt;Where We Started&lt;/h2&gt;

&lt;p&gt;The original code was fairly simple: It decides whether certain &amp;ldquo;dead&amp;rdquo;
components need to be &amp;ldquo;revived&amp;rdquo;, and presents the user with a prompt to choose
from one of several actions.
Depending on the user&amp;rsquo;s choice, the code then proceeds to take the appropriate action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def revive_dead_components():
    choice = choose(&#39;&amp;quot;I see dead components...&amp;quot;\n&#39;
       &amp;quot;Do you wish to (r)evive them, (c)ontinue without reviving, or (q)uit?&amp;quot;,
       { &amp;quot;r&amp;quot;: &amp;quot;revive&amp;quot;, 
         &amp;quot;c&amp;quot;: &amp;quot;continue&amp;quot;, 
         &amp;quot;Q&amp;quot;: &amp;quot;quit&amp;quot;}, 
       default = &amp;quot;quit&amp;quot;)

    if choice == &amp;quot;revive&amp;quot;:
        revive_components()
    elif choice == &amp;quot;quit&amp;quot;:
        raise TestCannotRunException(&amp;quot;Dead components exist&amp;quot;)
    elif choice == &amp;quot;continue&amp;quot;:
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-new-behavior&#34;&gt;Adding New Behavior&lt;/h2&gt;

&lt;p&gt;We now wanted to add some new functionality to the above code, namely the ability to
allow the user to select a &lt;em&gt;subset&lt;/em&gt; of the components that he wants to revive.&lt;/p&gt;

&lt;p&gt;To make things more foolproof, in case the user chose to revive selected
components but then neglected to select any components from the list, the code
would not proceed blindly but rather send the user back to the menu so that he could try again.&lt;/p&gt;

&lt;p&gt;The first version of the new code looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def revive_dead_components():
    while True:
        choice = choose(&#39;&amp;quot;I see dead components...&amp;quot;\n&#39;
            &amp;quot;Do you wish to (r)evive them all, (s)elect components to revive, &amp;quot;
            &amp;quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&amp;quot;,
            { &amp;quot;r&amp;quot;: &amp;quot;revive&amp;quot;,
              &amp;quot;s&amp;quot;: &amp;quot;select&amp;quot;, 
              &amp;quot;c&amp;quot;: &amp;quot;continue&amp;quot;, 
              &amp;quot;Q&amp;quot;: &amp;quot;quit&amp;quot;},
            default = &amp;quot;quit&amp;quot;)

        if choice == &amp;quot;revive&amp;quot;:
            revive_components()
            break
        elif choice == &amp;quot;quit&amp;quot;:
            raise TestCannotRunException(&amp;quot;Dead components exist&amp;quot;)
        elif choice == &amp;quot;continue&amp;quot;:
            break
        elif choice == &amp;quot;select&amp;quot;:
            selected = show_menu(&amp;quot;Which components would you like to revive?&amp;quot;)
            if selected:
                revive_components(selected)
                break
            else:
                logger.info(&amp;quot;Nothing selected...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the required behavior, we used an infinite &lt;code&gt;while True&lt;/code&gt; loop that terminates with an
explicit &lt;code&gt;break&lt;/code&gt; when a valid choice is made by the user and reiterates otherwise.
This ensures that we don&amp;rsquo;t continue until a valid choice is made.&lt;/p&gt;

&lt;h2 id=&#34;can-we-do-better&#34;&gt;Can We Do Better?&lt;/h2&gt;

&lt;p&gt;The problem with the above method is that the flow control is not immediately
apparent when looking at the code: It&amp;rsquo;s not obvious that the infinite loop
should actually terminate in all but one case. A future developer could easily
break this behavior.&lt;/p&gt;

&lt;p&gt;In addition, the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt; ladder becomes a bit too long to read
comfortably.&lt;/p&gt;

&lt;p&gt;The second iteration was meant to make the flow control clearer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def revive_dead_components():
    class InvalidChoiceError(Exception): pass

    def choice_revive():    revive_components()
    def choice_quit():      raise TestCannotRunException(&amp;quot;Dead components exist&amp;quot;)
    def choice_continue_(): pass
    def choice_select():
        selected = show_menu(&amp;quot;Which components would you like to revive?&amp;quot;)
        if not selected:
            logger.info(&amp;quot;Nothing selected...&amp;quot;)
            raise InvalidChoiceError

        revive_components(selected)

    while True:
        choice = choose(&#39;&amp;quot;I see dead components...&amp;quot;\n&#39;
            &amp;quot;Do you wish to (r)evive them all, (s)elect components to revive, &amp;quot;
            &amp;quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&amp;quot;,
            { &amp;quot;r&amp;quot;: &amp;quot;revive&amp;quot;,
              &amp;quot;s&amp;quot;: &amp;quot;select&amp;quot;, 
              &amp;quot;c&amp;quot;: &amp;quot;continue&amp;quot;, 
              &amp;quot;Q&amp;quot;: &amp;quot;quit&amp;quot;},
            default = &amp;quot;quit&amp;quot;)
        try:
            locals().get(&#39;choice_%s&#39; % choice)()
            break
        except InvalidChoiceError:
            continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use several techniques here to improve the clarity of the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We used internal functions to encapsulate the possible actions to take. The
advantage of using internal functions is that it keeps the external namespace
clean, and the naming of each function makes its purpose quite clear.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We used a dictionary instead of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elif&lt;/code&gt; construct. Since Python
doesn&amp;rsquo;t have a &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;case&lt;/code&gt; statement, this is a more readable replacement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We decided to use an exception to signify, well, &lt;em&gt;exceptional&lt;/em&gt; flow control: If the user hasn&amp;rsquo;t
selected any components, this warrants exceptional behavior. This technique is
much debated, but we felt like it was appropriate in this case.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The function name to be called is determined dynamically at runtime from the
user&amp;rsquo;s selection. The idea was to avoid code duplication by needing to specify the names
of the functions yet again (but see below).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;removing-some-coolness-for-readability&#34;&gt;Removing Some Coolness For Readability&lt;/h2&gt;

&lt;p&gt;My colleague pointed out that the &lt;code&gt;locals().get(&#39;choice_%s&#39; % choice)()&lt;/code&gt; trick
is not quite readable. I agreed, and was happy to accept his improved proposal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def revive_dead_components():

    # ...

    while True:
        choice_func = choose(&#39;&amp;quot;I see dead components...&amp;quot;\n&#39;
            &amp;quot;Do you wish to (r)evive them all, (s)elect components to revive, &amp;quot;
            &amp;quot;(c)ontinue without reviving, d(i)sable reviver, or (q)uit?&amp;quot;,
            dict(r = choice_revive,
                 s = choice_select, 
                 c = choice_continue,
                 Q = choice_quit
                 ),
            default = &amp;quot;quit&amp;quot;)
        try:
            choice_func()
            break
        except InvalidChoiceError:
            continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version has several advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It doesn&amp;rsquo;t use &amp;ldquo;magic&amp;rdquo; to achieve the selection of the function. Duplication
is better than magic in this case, since it makes the code more readable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The dictionary is created using the &lt;code&gt;dict()&lt;/code&gt; syntax instead of the &lt;code&gt;{...}&lt;/code&gt;
syntax, which gets rid of a lot of punctuation and makes the code clearer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It turns out that even in such a simple piece of code, several programming
techniques can be used to make the code clearer to read and maintain.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Gavrie Philipson</title>
      <link>http://philipson.co.il/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/about/</guid>
      <description>

&lt;p&gt;I am a seasoned software developer and technologist, a people person, and an experienced leader and teacher.&lt;/p&gt;

&lt;p&gt;I have more than 15 years of experience as a software developer, a decade of which as a hands-on team leader and manager. During this time I took care to stay up to date and actively involved in all stages of software development.&lt;/p&gt;

&lt;p&gt;I love to learn and to teach people on the subjects of programming languages, software development and methodologies, and automated testing. I have gained a lot of experience in building strong and effective software development teams, as well as in lecturing, training and coaching people.&lt;/p&gt;

&lt;p&gt;Much of my recent technical expertise involves developing user­space, system­level and networking software on Linux in Go, Python, and C. Past experience includes development of Windows applications and of database­backed Web applications. I’ve also programmed in JavaScript, C++ and C#.&lt;/p&gt;

&lt;p&gt;I have a vast amount of experience with Linux, including software development, system administration, networking, automation and shell scripting.&lt;/p&gt;

&lt;p&gt;During my tenure at IBM I have taught highly popular software development courses in Python to both beginners and veterans, as well as courses on software development tools such as Git.&lt;/p&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More Information&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;fa fa-linkedin&#34;&gt;&lt;/span&gt; Read Gavrie&amp;rsquo;s &lt;a href=&#34;https://www.linkedin.com/in/gavrie&#34;&gt;LinkedIn Profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fa fa-twitter&#34;&gt;&lt;/span&gt; Follow &lt;a href=&#34;https://twitter.com/gavrieph&#34;&gt;@gavrieph&lt;/a&gt; on Twitter&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fa fa-github&#34;&gt;&lt;/span&gt; Check out &lt;a href=&#34;https://github.com/gavrie&#34;&gt;gavrie&lt;/a&gt;&amp;rsquo;s code on GitHub&lt;/p&gt;

&lt;p&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://philipson.co.il/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://philipson.co.il/contact/</guid>
      <description>

&lt;h1 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h1&gt;

&lt;p&gt;Please feel free to contact us regarding consulting or training services:&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fa fa-envelope&#34;&gt;&lt;/span&gt; &lt;a href=&#34;mailto:info@philipson.co.il&#34;&gt;info@philipson.co.il&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>